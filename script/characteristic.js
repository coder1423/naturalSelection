class 특성정보 {
    constructor(최소, 최대) {
        this.최소 = 최소;
        this.최대 = 최대;
    }
}
const 특성관리 = {
    획득에너지: 50, 에너지소모: 0.01,
    감각능률: 10, 이동능률: 0.1, 변이확률배수: 0.05, 반지름특성배율: 0.2,
    변이크기: 1,
    기본반지름: 8, 식물반지름: -15,

    배열: [
        '감각', '속도', '변이',
        '유지에너지', '전달에너지',
        '최소회전', '최대회전', '회전속도',
        '반지름',
    ],
    정보: {
        감각: new 특성정보(0, 20),
        속도: new 특성정보(1, 20),
        변이: new 특성정보(1, 20),

        유지에너지: new 특성정보(0, 20),
        전달에너지: new 특성정보(1, 20),
        최소회전: new 특성정보(1, 10),
        최대회전: new 특성정보(1, 10),
        회전속도: new 특성정보(1, 20),
        반지름: new 특성정보(0, 20),
    },
    기본: {
        감각: 1, 속도: 1, 변이: 10,
        유지에너지: 10, 전달에너지: 10,
        회전속도: 5, 최소회전: 3, 최대회전: 9,
        반지름: 10,
    },
    동물생성: function(생물종, 특성, 위치) {
        const 변이확률 = 특성.변이;
        특성관리.배열.forEach(특성요소=>{
            const 특성정보 = 특성관리.정보[특성요소];
            if (생태계[생물종].특성강제[특성요소] == null) {
                if (Math.random() < (변이확률 * 특성관리.변이확률배수)) {
                    if (Math.random() < 0.5) {
                        특성[특성요소] += 특성관리.변이크기;
                    } else {
                        특성[특성요소] -= 특성관리.변이크기;
                    }
                }
            } else {
                특성[특성요소] = 생태계[생물종].특성강제[특성요소];
            }
            if (특성정보.최대 < 특성[특성요소]) {
                특성[특성요소] = 특성정보.최대;
            }
            else if (특성정보.최소 > 특성[특성요소]) {
                특성[특성요소] = 특성정보.최소;
            }
        });
        생태계[생물종].배열.push(new 생태계.개체(특성, 위치));
    },
    식물생성: function() {
        생태계.식물.배열.push({
            특성: {
                반지름: 특성관리.식물반지름
            },
            위치: 계산.랜덤위치()
        });
    },
}