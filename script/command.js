const 명령어 = { // 미완성
    개체관리: {
        생성: function(생물종, 횟수, 특성) {
            let 대체특성 = {}
            if (생태계[생물종].배열.length) {
                대체특성 = 계산.생물종특성평균(생물종);
            } else {
                대체특성 = 특성관리.기본;
            }
            if (특성 == undefined) {
                특성 = 대체특성;
            } else {
                특성관리.배열.forEach(특성요소=>{
                    if (특성[특성요소] == undefined) {
                        특성[특성요소] = 대체특성[특성요소];
                    }
                });
            }
            if (횟수 == undefined) {횟수 = 1;}
            for (let i = 0; i < 횟수; i++) {
                특성관리.동물생성(생물종, 계산.특성반환(특성), 계산.랜덤위치());
            }
        },
        제거: function(생물종, 횟수) {
            if (횟수 == undefined) {횟수 = 1;}
            for (let i = 0; i < 횟수; i++) {
                생태계[생물종].배열.shift();
            }
        },
    },
    생물종관리: {
        생성: function(생물종, 색상) {
            if (!생태계.동물.some(존재생물종 => 존재생물종 == 생물종) && 생물종 !== '식물') {
                생태계[생물종] = new 생태계.생물종(색상);
                생태계.동물.push(생물종);
                화면.개체수출력HTML생성(생물종, 색상);
            } else {
                console.log('이미 존재하는 생물종');
            }
        },
        제거: function(생물종) {
            if (생태계.동물.some(elem => elem == 생물종)) {
                delete 생태계[생물종];
                생태계.동물 = 생태계.동물.filter(존재생물종=> 존재생물종 !== 생물종);
                생태계.먹이그물계산();
                document.getElementById(생물종).remove();
            } else {
                console.log('존재하지 않는 생물종');
            }
        },
        먹이설정: function(생물종, 피식생물종배열) {
            if (생태계.동물.some(elem => elem == 생물종)) {
                생태계[생물종].피식생물종배열 = 피식생물종배열;
                생태계.먹이그물계산();
            } else {
                console.log('존재하지 않는 생물종')
            }
        },
        특성강제: function(생물종, 특성, 값입력) {
            if (값입력 == undefined) {
                생태계[생물종].특성강제[특성] = null;
            } else {
                생태계[생물종].특성강제[특성] = 값입력;
            }
        },
    },
    그래프관리: { // 미완성
        상태: function() {
            if (화면.상태그래프.허가 == false) {
                화면.상태그래프.허가 == true;
            } else {
                화면.상태그래프.허가 == false;
            }
        },
        변화: function(범위, 기준) {
            if (화면.변화그래프.허가 == false) {
                화면.변화그래프.허가 == true;
                if (기준 == undefined) {
                    화면.변화그래프.기준 = '실시간';
                } else {
                    화면.변화그래프.기준 = 기준;
                }
                화면.변화그래프.범위 = 범위;
            } else {
                화면.변화그래프.허가 == false;
            }
        },
        출력대상: function(생물종, 특성, 색상) {
            if (색상 == undefined) {색상 = 생물종.색상;}
            // 작성 필요
        },
    },
    애니매이션: {
        작동: function(초당출력) {
            if (초당출력 !== undefined) {
                화면.애니매이션간격 = 1000 / 초당출력;
            }
            if (화면.애니매이션작동 == false) {
                화면.애니매이션작동 = true;
                화면.애니매이션();
            }
        },
        정지: function() {
            화면.애니매이션작동 = false;
            cancelAnimationFrame(화면.출력애니매이션);
        },
    },
    시간당_식물생성_수_변경: function(변경목표, 변경크기) {
        if (변경크기 == undefined) {
            생태계.식물.초당생성 = 변경목표;
            변경크기 = 생태계.식물.생성수변화.변경크기;
        }
        생태계.식물.이전생성 = 생태계.시간;
        생태계.식물.이전변경 = 생태계.시간;
        생태계.식물.생성수변화 = {목표: 변경목표, 크기: 변경크기};
    },
    빠른계산: function(횟수) {
        const 시작 = performance.now();
        for(let i = 0; i < 횟수; i++) {
            계산.종합();
        }
        화면.출력();
        console.log((performance.now() - 시작) / 1000, '초');
    },
}